// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package dante_spb

import (
	context "context"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// State Query Service for %sDeadmessage
// QuerySet is the query set for the Deadmessage service.

type DeadmessagePSMQuerySet = psm.StateQuerySet[
	*GetDeadMessageRequest,
	*GetDeadMessageResponse,
	*ListDeadMessagesRequest,
	*ListDeadMessagesResponse,
	*ListDeadMessageEventsRequest,
	*ListDeadMessageEventsResponse,
]

func NewDeadmessagePSMQuerySet(
	smSpec psm.QuerySpec[
		*GetDeadMessageRequest,
		*GetDeadMessageResponse,
		*ListDeadMessagesRequest,
		*ListDeadMessagesResponse,
		*ListDeadMessageEventsRequest,
		*ListDeadMessageEventsResponse,
	],
	options psm.StateQueryOptions,
) (*DeadmessagePSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetDeadMessageRequest,
		*GetDeadMessageResponse,
		*ListDeadMessagesRequest,
		*ListDeadMessagesResponse,
		*ListDeadMessageEventsRequest,
		*ListDeadMessageEventsResponse,
	](smSpec, options)
}

type DeadmessagePSMQuerySpec = psm.QuerySpec[
	*GetDeadMessageRequest,
	*GetDeadMessageResponse,
	*ListDeadMessagesRequest,
	*ListDeadMessagesResponse,
	*ListDeadMessageEventsRequest,
	*ListDeadMessageEventsResponse,
]

func DefaultDeadmessagePSMQuerySpec(tableSpec psm.QueryTableSpec) DeadmessagePSMQuerySpec {
	return psm.QuerySpec[
		*GetDeadMessageRequest,
		*GetDeadMessageResponse,
		*ListDeadMessagesRequest,
		*ListDeadMessagesResponse,
		*ListDeadMessageEventsRequest,
		*ListDeadMessageEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *ListDeadMessagesRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *ListDeadMessageEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["message_id"] = req.MessageId
			return filter, nil
		},
	}
}

type DeadmessageQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *DeadmessagePSMQuerySet
	UnsafeDeadMessageQueryServiceServer
}

var _ DeadMessageQueryServiceServer = &DeadmessageQueryServiceImpl{}

func NewDeadmessageQueryServiceImpl(db sqrlx.Transactor, querySet *DeadmessagePSMQuerySet) *DeadmessageQueryServiceImpl {
	return &DeadmessageQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *DeadmessageQueryServiceImpl) GetDeadMessage(ctx context.Context, req *GetDeadMessageRequest) (*GetDeadMessageResponse, error) {
	resObject := &GetDeadMessageResponse{}
	err := s.querySet.Get(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *DeadmessageQueryServiceImpl) ListDeadMessages(ctx context.Context, req *ListDeadMessagesRequest) (*ListDeadMessagesResponse, error) {
	resObject := &ListDeadMessagesResponse{}
	err := s.querySet.List(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *DeadmessageQueryServiceImpl) ListDeadMessageEvents(ctx context.Context, req *ListDeadMessageEventsRequest) (*ListDeadMessageEventsResponse, error) {
	resObject := &ListDeadMessageEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}
