// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package dante_pb

import (
	context "context"
	fmt "fmt"
	psm_pb "github.com/pentops/protostate/gen/state/v1/psm_pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM DeadmessagePSM

type DeadmessagePSM = psm.StateMachine[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

type DeadmessagePSMDB = psm.DBStateMachine[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

type DeadmessagePSMEventer = psm.Eventer[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

type DeadmessagePSMEventSpec = psm.EventSpec[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

type DeadmessagePSMEventKey = string

const (
	DeadmessagePSMEventNil      DeadmessagePSMEventKey = "<nil>"
	DeadmessagePSMEventCreated  DeadmessagePSMEventKey = "created"
	DeadmessagePSMEventUpdated  DeadmessagePSMEventKey = "updated"
	DeadmessagePSMEventReplayed DeadmessagePSMEventKey = "replayed"
	DeadmessagePSMEventRejected DeadmessagePSMEventKey = "rejected"
)

// EXTEND DeadMessageKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *DeadMessageKeys) PSMFullName() string {
	return "o5.dante.v1.deadmessage"
}

// EXTEND DeadMessageState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageState) PSMIsSet() bool {
	return msg != nil
}

func (msg *DeadMessageState) PSMMetadata() *psm_pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *DeadMessageState) PSMKeys() *DeadMessageKeys {
	return msg.Keys
}

func (msg *DeadMessageState) SetStatus(status MessageStatus) {
	msg.Status = status
}

func (msg *DeadMessageState) SetPSMKeys(inner *DeadMessageKeys) {
	msg.Keys = inner
}

func (msg *DeadMessageState) PSMData() *DeadMessageData {
	if msg.Data == nil {
		msg.Data = &DeadMessageData{}
	}
	return msg.Data
}

// EXTEND DeadMessageData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND DeadMessageEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *DeadMessageEvent) PSMMetadata() *psm_pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *DeadMessageEvent) PSMKeys() *DeadMessageKeys {
	return msg.Keys
}

func (msg *DeadMessageEvent) SetPSMKeys(inner *DeadMessageKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the DeadmessagePSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *DeadMessageEvent) PSMEventKey() DeadmessagePSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return DeadmessagePSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *DeadMessageEvent) UnwrapPSMEvent() DeadmessagePSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *DeadMessageEventType_Created_:
		return v.Created
	case *DeadMessageEventType_Updated_:
		return v.Updated
	case *DeadMessageEventType_Replayed_:
		return v.Replayed
	case *DeadMessageEventType_Rejected_:
		return v.Rejected
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *DeadMessageEvent) SetPSMEvent(inner DeadmessagePSMEvent) error {
	if msg.Event == nil {
		msg.Event = &DeadMessageEventType{}
	}
	switch v := inner.(type) {
	case *DeadMessageEventType_Created:
		msg.Event.Type = &DeadMessageEventType_Created_{Created: v}
	case *DeadMessageEventType_Updated:
		msg.Event.Type = &DeadMessageEventType_Updated_{Updated: v}
	case *DeadMessageEventType_Replayed:
		msg.Event.Type = &DeadMessageEventType_Replayed_{Replayed: v}
	case *DeadMessageEventType_Rejected:
		msg.Event.Type = &DeadMessageEventType_Rejected_{Rejected: v}
	default:
		return fmt.Errorf("invalid type %T for DeadMessageEventType", v)
	}
	return nil
}

type DeadmessagePSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() DeadmessagePSMEventKey
}

// EXTEND DeadMessageEventType_Created with the DeadmessagePSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEventType_Created) PSMIsSet() bool {
	return msg != nil
}

func (*DeadMessageEventType_Created) PSMEventKey() DeadmessagePSMEventKey {
	return DeadmessagePSMEventCreated
}

// EXTEND DeadMessageEventType_Updated with the DeadmessagePSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEventType_Updated) PSMIsSet() bool {
	return msg != nil
}

func (*DeadMessageEventType_Updated) PSMEventKey() DeadmessagePSMEventKey {
	return DeadmessagePSMEventUpdated
}

// EXTEND DeadMessageEventType_Replayed with the DeadmessagePSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEventType_Replayed) PSMIsSet() bool {
	return msg != nil
}

func (*DeadMessageEventType_Replayed) PSMEventKey() DeadmessagePSMEventKey {
	return DeadmessagePSMEventReplayed
}

// EXTEND DeadMessageEventType_Rejected with the DeadmessagePSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEventType_Rejected) PSMIsSet() bool {
	return msg != nil
}

func (*DeadMessageEventType_Rejected) PSMEventKey() DeadmessagePSMEventKey {
	return DeadmessagePSMEventRejected
}

type DeadmessagePSMTableSpec = psm.PSMTableSpec[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

var DefaultDeadmessagePSMTableSpec = DeadmessagePSMTableSpec{
	State: psm.TableSpec[*DeadMessageState]{
		TableName:  "deadmessage",
		DataColumn: "state",
		StoreExtraColumns: func(state *DeadMessageState) (map[string]interface{}, error) {
			return map[string]interface{}{}, nil
		},
		PKFieldPaths: []string{
			"keys.message_id",
		},
	},
	Event: psm.TableSpec[*DeadMessageEvent]{
		TableName:  "deadmessage_event",
		DataColumn: "data",
		StoreExtraColumns: func(event *DeadMessageEvent) (map[string]interface{}, error) {
			metadata := event.Metadata
			return map[string]interface{}{
				"id":         metadata.EventId,
				"timestamp":  metadata.Timestamp,
				"cause":      metadata.Cause,
				"sequence":   metadata.Sequence,
				"message_id": event.Keys.MessageId,
			}, nil
		},
		PKFieldPaths: []string{
			"metadata.EventId",
		},
	},
	EventPrimaryKey: func(id string, keys *DeadMessageKeys) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": id,
		}, nil
	},
	PrimaryKey: func(keys *DeadMessageKeys) (map[string]interface{}, error) {
		return map[string]interface{}{
			"message_id": keys.MessageId,
		}, nil
	},
}

func DefaultDeadmessagePSMConfig() *psm.StateMachineConfig[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	return psm.NewStateMachineConfig[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	](DefaultDeadmessagePSMTableSpec)
}

func NewDeadmessagePSM(config *psm.StateMachineConfig[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]) (*DeadmessagePSM, error) {
	return psm.NewStateMachine[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	](config)
}

func DeadmessagePSMMutation[SE DeadmessagePSMEvent](cb func(*DeadMessageData, SE) error) psm.PSMMutationFunc[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
	SE,                  // Specific event type for the transition
] {
	return psm.PSMMutationFunc[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
		SE,                  // Specific event type for the transition
	](cb)
}

type DeadmessagePSMHookBaton = psm.HookBaton[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

func DeadmessagePSMHook[SE DeadmessagePSMEvent](cb func(context.Context, sqrlx.Transaction, DeadmessagePSMHookBaton, *DeadMessageState, SE) error) psm.PSMHookFunc[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
	SE,                  // Specific event type for the transition
] {
	return psm.PSMHookFunc[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
		SE,                  // Specific event type for the transition
	](cb)
}
func DeadmessagePSMGeneralHook(cb func(context.Context, sqrlx.Transaction, DeadmessagePSMHookBaton, *DeadMessageState, *DeadMessageEvent) error) psm.GeneralStateHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	](cb)
}
