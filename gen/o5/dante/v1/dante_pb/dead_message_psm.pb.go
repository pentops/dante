// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package dante_pb

import (
	context "context"
	fmt "fmt"
	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM DeadmessagePSM

type DeadmessagePSM = psm.StateMachine[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

type DeadmessagePSMDB = psm.DBStateMachine[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

type DeadmessagePSMEventSpec = psm.EventSpec[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

type DeadmessagePSMHookBaton = psm.HookBaton[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

type DeadmessagePSMFullBaton = psm.CallbackBaton[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
]

type DeadmessagePSMEventKey = string

const (
	DeadmessagePSMEventNil      DeadmessagePSMEventKey = "<nil>"
	DeadmessagePSMEventNotified DeadmessagePSMEventKey = "notified"
	DeadmessagePSMEventUpdated  DeadmessagePSMEventKey = "updated"
	DeadmessagePSMEventReplayed DeadmessagePSMEventKey = "replayed"
	DeadmessagePSMEventRejected DeadmessagePSMEventKey = "rejected"
)

// EXTEND DeadMessageKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *DeadMessageKeys) PSMFullName() string {
	return "o5.dante.v1.deadmessage"
}
func (msg *DeadMessageKeys) PSMKeyValues() (map[string]any, error) {
	keyset := map[string]any{
		"message_id": msg.MessageId,
	}
	return keyset, nil
}

// EXTEND DeadMessageState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageState) PSMIsSet() bool {
	return msg != nil
}

func (msg *DeadMessageState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *DeadMessageState) PSMKeys() *DeadMessageKeys {
	return msg.Keys
}

func (msg *DeadMessageState) SetStatus(status MessageStatus) {
	msg.Status = status
}

func (msg *DeadMessageState) SetPSMKeys(inner *DeadMessageKeys) {
	msg.Keys = inner
}

func (msg *DeadMessageState) PSMData() *DeadMessageData {
	if msg.Data == nil {
		msg.Data = &DeadMessageData{}
	}
	return msg.Data
}

// EXTEND DeadMessageData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND DeadMessageEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *DeadMessageEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *DeadMessageEvent) PSMKeys() *DeadMessageKeys {
	return msg.Keys
}

func (msg *DeadMessageEvent) SetPSMKeys(inner *DeadMessageKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the DeadmessagePSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *DeadMessageEvent) PSMEventKey() DeadmessagePSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return DeadmessagePSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *DeadMessageEvent) UnwrapPSMEvent() DeadmessagePSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *DeadMessageEventType_Notified_:
		return v.Notified
	case *DeadMessageEventType_Updated_:
		return v.Updated
	case *DeadMessageEventType_Replayed_:
		return v.Replayed
	case *DeadMessageEventType_Rejected_:
		return v.Rejected
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *DeadMessageEvent) SetPSMEvent(inner DeadmessagePSMEvent) error {
	if msg.Event == nil {
		msg.Event = &DeadMessageEventType{}
	}
	switch v := inner.(type) {
	case *DeadMessageEventType_Notified:
		msg.Event.Type = &DeadMessageEventType_Notified_{Notified: v}
	case *DeadMessageEventType_Updated:
		msg.Event.Type = &DeadMessageEventType_Updated_{Updated: v}
	case *DeadMessageEventType_Replayed:
		msg.Event.Type = &DeadMessageEventType_Replayed_{Replayed: v}
	case *DeadMessageEventType_Rejected:
		msg.Event.Type = &DeadMessageEventType_Rejected_{Rejected: v}
	default:
		return fmt.Errorf("invalid type %T for DeadMessageEventType", v)
	}
	return nil
}

type DeadmessagePSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() DeadmessagePSMEventKey
}

// EXTEND DeadMessageEventType_Notified with the DeadmessagePSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEventType_Notified) PSMIsSet() bool {
	return msg != nil
}

func (*DeadMessageEventType_Notified) PSMEventKey() DeadmessagePSMEventKey {
	return DeadmessagePSMEventNotified
}

// EXTEND DeadMessageEventType_Updated with the DeadmessagePSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEventType_Updated) PSMIsSet() bool {
	return msg != nil
}

func (*DeadMessageEventType_Updated) PSMEventKey() DeadmessagePSMEventKey {
	return DeadmessagePSMEventUpdated
}

// EXTEND DeadMessageEventType_Replayed with the DeadmessagePSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEventType_Replayed) PSMIsSet() bool {
	return msg != nil
}

func (*DeadMessageEventType_Replayed) PSMEventKey() DeadmessagePSMEventKey {
	return DeadmessagePSMEventReplayed
}

// EXTEND DeadMessageEventType_Rejected with the DeadmessagePSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeadMessageEventType_Rejected) PSMIsSet() bool {
	return msg != nil
}

func (*DeadMessageEventType_Rejected) PSMEventKey() DeadmessagePSMEventKey {
	return DeadmessagePSMEventRejected
}

func DeadmessagePSMBuilder() *psm.StateMachineConfig[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{}
}

// DeadmessagePSMMutation runs at the start of a transition to merge the event information into the state data object. The state object is mutable in this context.
func DeadmessagePSMMutation[SE DeadmessagePSMEvent](cb func(*DeadMessageData, SE) error) psm.TransitionMutation[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
	SE,                  // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
		SE,                  // Specific event type for the transition
	](cb)
}

// DeadmessagePSMLogicHook runs after the mutation is complete. This hook can trigger side effects, including chained events, which are additional events processed by the state machine. Use this for Business Logic which determines the 'next step' in processing.
func DeadmessagePSMLogicHook[
	SE DeadmessagePSMEvent,
](
	cb func(
		context.Context,
		DeadmessagePSMHookBaton,
		*DeadMessageState,
		SE,
	) error) psm.TransitionHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton DeadmessagePSMFullBaton, state *DeadMessageState, event *DeadMessageEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, baton, state, asType)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// DeadmessagePSMDataHook runs after the mutations, and can be used to update data in tables which are not controlled as the state machine, e.g. for pre-calculating fields for performance reasons. Use of this hook prevents (future) transaction optimizations, as the transaction state when the function is called must needs to match the processing state, but only for this single transition, unlike the GeneralEventDataHook.
func DeadmessagePSMDataHook[
	SE DeadmessagePSMEvent,
](
	cb func(
		context.Context,
		sqrlx.Transaction,
		*DeadMessageState,
		SE,
	) error) psm.TransitionHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton DeadmessagePSMFullBaton, state *DeadMessageState, event *DeadMessageEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, tx, state, asType)
		},
		EventType:   eventType,
		RunOnFollow: true,
	}
}

// DeadmessagePSMLinkHook runs after the mutation and logic hook, and can be used to link the state machine to other state machines in the same database transaction
func DeadmessagePSMLinkHook[
	SE DeadmessagePSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		*DeadMessageState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	wrapped := func(ctx context.Context, tx sqrlx.Transaction, state *DeadMessageState, event SE, add func(DK, DIE)) error {
		return cb(ctx, state, event, add)
	}
	return psm.TransitionHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton DeadmessagePSMFullBaton, state *DeadMessageState, event *DeadMessageEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, wrapped, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// DeadmessagePSMLinkDBHook like LinkHook, but has access to the current transaction for reads only (not enforced), use in place of controller logic to look up existing state.
func DeadmessagePSMLinkDBHook[
	SE DeadmessagePSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		sqrlx.Transaction,
		*DeadMessageState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton DeadmessagePSMFullBaton, state *DeadMessageState, event *DeadMessageEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, cb, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// DeadmessagePSMGeneralLogicHook runs once per transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, with the state object in the final state after the transition but prior to processing any further events. Chained events are added to the *end* of the event queue for the transaction, and side effects are published (as always) when the transaction is committed. The function MUST be pure, i.e. It MUST NOT produce any side-effects outside of the HookBaton, and MUST NOT modify the state.
func DeadmessagePSMGeneralLogicHook(
	cb func(
		context.Context,
		DeadmessagePSMHookBaton,
		*DeadMessageState,
		*DeadMessageEvent,
	) error) psm.GeneralEventHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton DeadmessagePSMFullBaton,
			state *DeadMessageState,
			event *DeadMessageEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// DeadmessagePSMGeneralStateDataHook runs at the state-machine level regardless of which transition / event is being processed. It runs at-least once before committing a database transaction after multiple transitions are complete. This hook has access only to the final state after the transitions and is used to update other tables based on the resulting state. It MUST be idempotent, it may be called after injecting externally-held state data.
func DeadmessagePSMGeneralStateDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*DeadMessageState,
	) error) psm.GeneralStateHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton DeadmessagePSMFullBaton,
			state *DeadMessageState,
		) error {
			return cb(ctx, tx, state)
		},
		RunOnFollow: true,
	}
}

// DeadmessagePSMGeneralEventDataHook runs after each transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, before any other events are processed. The presence of this hook type prevents (future) transaction optimizations, so should be used sparingly.
func DeadmessagePSMGeneralEventDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*DeadMessageState,
		*DeadMessageEvent,
	) error) psm.GeneralEventHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton DeadmessagePSMFullBaton,
			state *DeadMessageState,
			event *DeadMessageEvent,
		) error {
			return cb(ctx, tx, state, event)
		},
		RunOnFollow: true,
	}
}

// DeadmessagePSMEventPublishHook  EventPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func DeadmessagePSMEventPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*DeadMessageState,
		*DeadMessageEvent,
	) error) psm.GeneralEventHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton DeadmessagePSMFullBaton,
			state *DeadMessageState,
			event *DeadMessageEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// DeadmessagePSMUpsertPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func DeadmessagePSMUpsertPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*DeadMessageState,
	) error) psm.GeneralStateHook[
	*DeadMessageKeys,    // implements psm.IKeyset
	*DeadMessageState,   // implements psm.IState
	MessageStatus,       // implements psm.IStatusEnum
	*DeadMessageData,    // implements psm.IStateData
	*DeadMessageEvent,   // implements psm.IEvent
	DeadmessagePSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*DeadMessageKeys,    // implements psm.IKeyset
		*DeadMessageState,   // implements psm.IState
		MessageStatus,       // implements psm.IStatusEnum
		*DeadMessageData,    // implements psm.IStateData
		*DeadMessageEvent,   // implements psm.IEvent
		DeadmessagePSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton DeadmessagePSMFullBaton,
			state *DeadMessageState,
		) error {
			return cb(ctx, baton, state)
		},
		RunOnFollow: false,
	}
}

func (event *DeadMessageEvent) EventPublishMetadata() *psm_j5pb.EventPublishMetadata {
	tenantKeys := make([]*psm_j5pb.EventTenant, 0)
	return &psm_j5pb.EventPublishMetadata{
		EventId:   event.Metadata.EventId,
		Sequence:  event.Metadata.Sequence,
		Timestamp: event.Metadata.Timestamp,
		Cause:     event.Metadata.Cause,
		Auth: &psm_j5pb.PublishAuth{
			TenantKeys: tenantKeys,
		},
	}
}
